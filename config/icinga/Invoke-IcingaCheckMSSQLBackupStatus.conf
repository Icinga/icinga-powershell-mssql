object CheckCommand "Invoke-IcingaCheckMSSQLBackupStatus" {
    import "PowerShell Base"

    arguments += {
        "-TotalBackupSizeWarning" = {
            description = "Warning threshold for the total backupsize which represent a count of all backups"
            value = "$IcingaCheckMSSQLBackupStatus_Object_TotalBackupSizeWarning$"
            order = 2
        }
        "-IncludeDatabase" = {
            description = "Specifies the database or databases which will be checked. Leave empty to fetch metrics from all databases on the given system"
            value = {{
                var arr = macro("$IcingaCheckMSSQLBackupStatus_Array_IncludeDatabase$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 14
        }
        "-DatabaseStatusWarning" = {
            description = "Warning threshold for the database status:     Online     Restoring     Recovering     Recovering_Pending     Suspect     Emergency     Offline     Copying     Offline_Secondary"
            value = "$IcingaCheckMSSQLBackupStatus_Object_DatabaseStatusWarning$"
            order = 12
        }
        "-ExecutionTimeCritical" = {
            description = "Critical threshold for the execution time, which returns the elapsed time how long the backup process took"
            value = "$IcingaCheckMSSQLBackupStatus_Object_ExecutionTimeCritical$"
            order = 11
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckMSSQLBackupStatus_Switchparameter_NoPerfData$"
            order = 99
        }
        "-SqlUsername" = {
            set_if = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_SqlUsername$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The username for connecting to the MSSQL database"
            value = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_SqlUsername$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 15
        }
        "-LastBackupLogAgeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupLogAgeCritical$"
            order = 7
        }
        "-LastBackupAgeWarning" = {
            description = "Warning threshold for the last log backup age, which returns the elapsed time since a database was last backupped"
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupAgeWarning$"
            order = 8
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckMSSQLBackupStatus' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExecutionTimeWarning" = {
            description = "Warning threshold for the execution time, which returns the elapsed time how long the backup process took"
            value = "$IcingaCheckMSSQLBackupStatus_Object_ExecutionTimeWarning$"
            order = 10
        }
        "-LastBackupLogAgeWarning" = {
            description = "Warning threshold for the last log backup age, which returns the elapsed time since a database was last backupped"
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupLogAgeWarning$"
            order = 6
        }
        "-AvgBackupSizeWarning" = {
            description = "Warning threshold for the average backupsize which represent an average backupsize of all backups"
            value = "$IcingaCheckMSSQLBackupStatus_Object_AvgBackupSizeWarning$"
            order = 4
        }
        "-IntegratedSecurity" = {
            set_if = "$IcingaCheckMSSQLBackupStatus_Switchparameter_IntegratedSecurity$"
            order = 99
        }
        "-DatabaseStatusCritical" = {
            description = "Critical threshold for the database status:     Online     Restoring     Recovering     Recovering_Pending     Suspect     Emergency     Offline     Copying     Offline_Secondary"
            value = "$IcingaCheckMSSQLBackupStatus_Object_DatabaseStatusCritical$"
            order = 13
        }
        "-SqlHost" = {
            set_if = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_SqlHost$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The IP address or FQDN to the MSSQL server to connect to"
            value = {{
                var str = macro("$IcingaCheckMSSQLBackupStatus_String_SqlHost$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 17
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckMSSQLBackupStatus_Object_Verbosity$"
            order = 20
        }
        "-TotalBackupSizeCritical" = {
            description = "Critical threshold for the total backupsize which represent a count of all backups"
            value = "$IcingaCheckMSSQLBackupStatus_Object_TotalBackupSizeCritical$"
            order = 3
        }
        "-SqlPort" = {
            description = "The port of the MSSQL server/instance to connect to with the provided credentials"
            value = "$IcingaCheckMSSQLBackupStatus_Int32_SqlPort$"
            order = 18
        }
        "-IncludeDays" = {
            description = "Specifies the number of days to read the backup history from MSSQL. Over time, the history table can get quite large and if there is no maintenance task in place to shrink it, this script could time out. By default the entire history is evaluated."
            value = "$IcingaCheckMSSQLBackupStatus_Object_IncludeDays$"
            order = 19
        }
        "-LastBackupAgeCritical" = {
            description = "Critical threshold for the last backup age, which returns the elapsed time since a database was last backupped"
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupAgeCritical$"
            order = 9
        }
        "-AvgBackupSizeCritical" = {
            description = "Critical threshold for the average backupsize which represent an average backupsize of all backups"
            value = "$IcingaCheckMSSQLBackupStatus_Object_AvgBackupSizeCritical$"
            order = 5
        }
        "-SqlPassword" = {
            description = "The password for connecting to the MSSQL database as secure string"
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckMSSQLBackupStatus_Securestring_SqlPassword$')"
            order = 16
        }
    }
    vars.IcingaCheckMSSQLBackupStatus_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "LastBackupAgeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupAgeCritical$"
        }
        "SqlPort" = {
            value = "$IcingaCheckMSSQLBackupStatus_Int32_SqlPort$"
        }
        "LastBackupAgeWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupAgeWarning$"
        }
        "IncludeDays" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_IncludeDays$"
        }
        "ExecutionTimeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_ExecutionTimeCritical$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckMSSQLBackupStatus_Switchparameter_NoPerfData$"
        }
        "SqlHost" = {
            value = "$IcingaCheckMSSQLBackupStatus_String_SqlHost$"
        }
        "ExecutionTimeWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_ExecutionTimeWarning$"
        }
        "DatabaseStatusCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_DatabaseStatusCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckMSSQLBackupStatus_String_ThresholdInterval$"
        }
        "SqlPassword" = {
            value = "$IcingaCheckMSSQLBackupStatus_Securestring_SqlPassword$"
        }
        "AvgBackupSizeWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_AvgBackupSizeWarning$"
        }
        "LastBackupLogAgeWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupLogAgeWarning$"
        }
        "SqlUsername" = {
            value = "$IcingaCheckMSSQLBackupStatus_String_SqlUsername$"
        }
        "IntegratedSecurity" = {
            set_if = "$IcingaCheckMSSQLBackupStatus_Switchparameter_IntegratedSecurity$"
        }
        "AvgBackupSizeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_AvgBackupSizeCritical$"
        }
        "LastBackupLogAgeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_LastBackupLogAgeCritical$"
        }
        "IncludeDatabase" = {
            value = "$IcingaCheckMSSQLBackupStatus_Array_IncludeDatabase$"
        }
        "DatabaseStatusWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_DatabaseStatusWarning$"
        }
        "TotalBackupSizeCritical" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_TotalBackupSizeCritical$"
        }
        "TotalBackupSizeWarning" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_TotalBackupSizeWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckMSSQLBackupStatus_Object_Verbosity$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckmssqlbackupstatus"
    vars.IcingaCheckMSSQLBackupStatus_Switchparameter_IntegratedSecurity = false
}
